import sys
import pygame
from pygame.locals import KEYDOWN, K_q
import numpy as np

# CONSTANTS:
SCREENSIZE = WIDTH, HEIGHT = 600, 400

BLACK = (0, 0, 0)
GREY = (160, 160, 160)
YELLOW = (255, 255, 0)
TOMATO = (255, 0, 0)
DBLUE = (30, 144, 255)
LIME = (0, 255, 0)

# OUR GRID MAP:
cellMAP = np.random.randint(2, size=(6, 6))
print(cellMAP)

# e.g. >>
# [[1 1 1 1 1 1]
#  [0 0 1 1 0 1]
#  [1 0 0 0 1 1]
#  [0 0 0 1 1 0]
#  [0 1 1 0 0 0]
#  [1 0 0 0 0 0]]


_VARS = {'surf': False,
         'gridSize': cellMAP.shape[0],
         'cellSize': 20,
         'cartGridOrigin': [80, 100],
         'isoGridOrigin': [260, -150]}


def main():
    pygame.init()  # Initial Setup
    _VARS['surf'] = pygame.display.set_mode(SCREENSIZE)
    while True:
        checkEvents()
        _VARS['surf'].fill(GREY)
        # PLacing tiles first to avoid tile border issues
        placeCartGridTiles()
        placeISOTiles()
        drawCartesianGrid(_VARS['cartGridOrigin'],
                          _VARS['gridSize'],
                          _VARS['cellSize'])
        drawIsometricGrid(_VARS['isoGridOrigin'],
                          _VARS['gridSize'],
                          _VARS['cellSize'])
        pygame.display.update()


def cartToIso(point):
    isoX = point[0] - point[1]
    isoY = (point[0] + point[1])/2
    return [isoX, isoY]


def drawCartesianGrid(origin, size, cellSize):
    # borderCoordinates:
    hw = cellSize*size
    borderPoints = [origin, [origin[0], hw + origin[1]],
                    [hw + origin[0], hw + origin[1]],
                    [hw + origin[0], origin[1]]]
    pygame.draw.polygon(_VARS['surf'], BLACK, borderPoints, 2)
    # Draw inner grid :
    for colRow in range(1, size):
        dim = cellSize*colRow
        pygame.draw.line(_VARS['surf'], BLACK, (origin[0], origin[1] + dim),
                         (hw + origin[0], origin[1] + dim), 1)
        pygame.draw.line(_VARS['surf'], BLACK, (origin[0] + dim, origin[1]),
                         (origin[0] + dim, hw + origin[1]), 1)


def drawIsometricGrid(origin, size, cellSize):
    hw = cellSize*size
    borderPoints = [cartToIso(origin),
                    cartToIso([origin[0], hw + origin[1]]),
                    cartToIso([hw + origin[0], hw + origin[1]]),
                    cartToIso([hw + origin[0], origin[1]])]
    # Draw border
    pygame.draw.polygon(_VARS['surf'], BLACK, borderPoints, 2)
    # Draw inner grid :
    for colRow in range(1, size):
        dim = cellSize*colRow
        pygame.draw.line(_VARS['surf'], BLACK,
                         cartToIso([origin[0], origin[1] + dim]),
                         cartToIso([hw + origin[0], origin[1] + dim]), 1)
        pygame.draw.line(_VARS['surf'], BLACK,
                         cartToIso([origin[0] + dim, origin[1]]),
                         cartToIso([origin[0] + dim, hw + origin[1]]), 1)


def placeCartGridTiles():
    tileDIM = _VARS['cellSize']
    for row in range(cellMAP.shape[0]):
        for column in range(cellMAP.shape[1]):
            # Is the grid cell tiled ?
            if(cellMAP[column][row] == 1):
                pygame.draw.rect(_VARS['surf'], TOMATO,
                                 (_VARS['cartGridOrigin'][0] + (tileDIM*row),
                                  _VARS['cartGridOrigin'][1] +
                                  (tileDIM*column),
                                  tileDIM, tileDIM))


def placeISOTiles():
    tileDIM = _VARS['cellSize']
    origin = _VARS['isoGridOrigin']
    originX, originY = origin[0], origin[1]
    for row in range(cellMAP.shape[0]):
        for column in range(cellMAP.shape[1]):
            # Is the grid cell tiled ?
            if(cellMAP[column][row] == 1):
                tilePoints = [cartToIso([originX + (tileDIM*row),
                              originY + (tileDIM*column)]),
                              cartToIso([originX + (tileDIM*(row + 1)),
                                         originY + (tileDIM*column)]),
                              cartToIso([originX + (tileDIM*(row + 1)),
                                         originY + (tileDIM*(column + 1))]),
                              cartToIso([originX + (tileDIM*row),
                                         originY + (tileDIM*(column + 1))])
                              ]
                pygame.draw.polygon(_VARS['surf'], TOMATO, tilePoints, )


def checkEvents():
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            sys.exit()
        elif event.type == KEYDOWN and event.key == K_q:
            pygame.quit()
            sys.exit()


if __name__ == '__main__':
    main()
